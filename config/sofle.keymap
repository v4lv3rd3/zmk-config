#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>

#include <dt-bindings/zmk/pointing.h

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#delete all #include <dt-bindings/zmk/pointing.h> or will not compile

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // Velocidad del cursor
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // Velocidad de desplazamiento
#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT

/ {
    behaviors {
        mmv {
            acceleration-exponent = <1>;       // Suavidad del movimiento
            time-to-max-speed-ms = <900>;     // Tiempo para alcanzar velocidad máxima
            delay-ms = <0>;                   // Sin retraso
        };

        msc {
            acceleration-exponent = <1>;      // Suavidad del desplazamiento
            time-to-max-speed-ms = <400>;     // Tiempo para alcanzar velocidad máxima
            delay-ms = <0>;                   // Sin retraso
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    keymap {
        compatible = "zmk,keymap";

        // Capa base

        layer0 {
            bindings = <
&kp ESC     &kp N1    &kp N2        &kp N3        &kp N4     &kp N5    &kp UP_ARROW     &kp N6  &kp N7     &kp N8     &kp N9   &kp N0     &kp DELETE
&kp TAB     &kp Q     &kp W         &kp E         &kp R      &kp T     &kp DOWN_ARROW   &kp Y   &kp U      &kp I      &kp O    &kp P      &kp BACKSPACE
&kp LSHFT   &kp A     &kp S         &kp D         &kp F      &kp G     &kp LEFT_ARROW   &kp H   &kp J      &kp K      &kp L    &kp SEMI   &kp ENTER
&kp LCTRL   &kp Z     &kp X         &kp C         &kp V      &kp B     &kp RIGHT_ARROW  &kp N   &kp M      &kp COMMA  &kp DOT  &kp FSLH   &kp LSHFT
&kp C_MUTE  &kp CAPS  &kp LEFT_GUI  &kp LEFT_ALT  &kp SPACE  &mo 1     &tog 3           &mo 2   &kp SPACE  &kp RALT   &mo 4    &kp RCTRL
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        // Capa 1

        layer_1 {
            bindings = <
&kp F12        &kp F1            &kp F2                             &kp F3           &kp F4           &kp F5             &mmv MOVE_UP     &kp F6           &kp F7           &kp F8  &kp F9    &kp F10   &kp F11
&trans         &trans            &trans                             &trans           &trans           &trans             &mmv MOVE_DOWN   &trans           &kp END          &trans  &kp LBKT  &kp RBKT  &kp PAGE_UP
&trans         &rgb_ug RGB_TOG   &rgb_ug RGB_COLOR_HSB(0,0,100)     &trans           &trans           &trans             &mmv MOVE_LEFT   &trans           &trans           &trans  &kp APOS  &kp BSLH  &kp PAGE_DOWN
&kp LESS_THAN  &kp GREATER_THAN  &rgb_ug RGB_COLOR_HSB(285,100,50)  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI    &mmv MOVE_RIGHT  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &trans  &trans    &trans    &trans
&kp C_MUTE     &trans            &trans                             &trans           &trans           &trans             &trans           &trans           &trans           &trans  &trans    &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        // Capa 2

        layer_2 {
            bindings = <
&kp TILDE  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &trans  &trans    &trans      &trans     &trans       &trans
&trans     &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &mmv MOVE_DOWN   &trans  &trans    &kp UP      &trans     &trans       &trans
&trans     &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &mmv MOVE_LEFT   &trans  &kp LEFT  &kp DOWN    &kp RIGHT  &trans       &trans
&trans     &sys_reset    &trans          &bootloader   &trans        &trans          &mmv MOVE_RIGHT  &trans  &trans    &sys_reset  &soft_off  &bootloader  &trans
&trans     &trans        &trans          &trans        &trans        &trans          &trans           &trans  &trans    &trans      &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        // Capa 3

        layer_3 {
            bindings = <
&trans     &trans     &kp N1  &kp N2  &kp N3  &kp N4    &trans  &trans  &trans           &trans           &trans           &trans  &trans
&trans     &trans     &kp Q   &kp W   &kp E   &kp R     &trans  &trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans  &trans
&kp LSHFT  &kp LSHFT  &kp A   &kp S   &kp D   &kp F     &trans  &trans  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans  &trans
&kp LCTRL  &kp LCTRL  &kp Z   &kp X   &kp C   &kp V     &trans  &trans  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans  &trans
&trans     &trans     &trans  &trans  &trans  &trans    &trans  &trans  &trans           &trans           &kp KP_NUMBER_0  &trans
            >;
        };

        layer_4_colors {
            bindings = <
&rgb_ug RGB_COLOR_HSB(183,100,51)  &rgb_ug RGB_COLOR_HSB(201,100,50)  &rgb_ug RGB_COLOR_HSB(279,97,50)  &rgb_ug RGB_COLOR_HSB(302,100,50)  &rgb_ug RGB_COLOR_HSB(360,100,50)  &rgb_ug RGB_COLOR_HSB(28,100,50)    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&rgb_ug RGB_COLOR_HSB(59,100,50)   &rgb_ug RGB_COLOR_HSB(117,100,50)  &trans                            &trans                             &trans                             &trans                              &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans                             &trans                             &trans                            &trans                             &trans                             &trans                              &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans                             &trans                             &trans                            &trans                             &trans                             &trans                              &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans                             &trans                             &trans                            &trans                             &trans                             &trans                              &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
